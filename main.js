// Задание 1 "Получение данных о пользователе"
/* Реализуйте функцию getUserData, которая принимает идентификатор пользователя (ID) в качестве аргумента и использует fetch для получения данных о пользователе с заданным ID с удаленного сервера. Функция должна возвращать промис, который разрешается с данными о пользователе в виде объекта. Если пользователь с указанным ID не найден, промис должен быть отклонен с соответствующим сообщением об ошибке.
Подсказка, с последовательностью действий:
getUserData использует fetch для получения данных о пользователе с удаленного сервера. Если запрос успешен (с кодом 200), функция извлекает данные из ответа с помощью response.json() и возвращает объект с данными о пользователе. Если запрос неуспешен, функция отклоняет промис с сообщением об ошибке*/

async function getUserData(userId) {
    // Шаг 1: Отправляем GET-запрос к API-серверу - с помощью бэктиков сразу обращаемся к ID пользователя. Используем метод fetch для отправки GET-запроса к серверу. Адрес запроса содержит параметр userId, чтобы получить данные именно этого пользователя.
    const response = await fetch(`https://jsonplaceholder.typicode.com/users/${userId}`);
        
    // Шаг 2: Проверяем статус ответа. Если запрос был успешным (статус-коды 200–299), продолжаем выполнение программы. В противном случае бросаем ошибку.
    if (response.ok) {

        // Шаг 3: Извлекаем данные из успешного ответа. Метод response.json используется для преобразования тела ответа в JavaScript-объект.
        const userData = await response.json();
        return userData;

        } else {
            // Шаг 4: Отклоняем промис с сообщением об ошибке
            throw new Error(`Не удалось получить данные пользователя с ID ${userId}. Ошибка: ${response.statusText}`);
        }
    }

    
// Пример использования функции
getUserData(1)
.then(userData => {
    console.log("Получили данные пользователя:", userData);
})
.catch(error => {
    console.error("Произошла ошибка:", error.message);
});



// Задание 2 "Отправка данных на сервер"
/* Реализуйте функцию saveUserData, которая принимает объект с данными о пользователе в качестве аргумента и использует fetch для отправки этих данных на удаленный сервер для сохранения. Функция должна возвращать промис, который разрешается, если данные успешно отправлены, или отклоняется в случае ошибки.*/

async function saveUserData (userData) {
    // Мы используем метод POST для отправки данных на сервер. Заголовок 'Content-Type': 'application/json' указывает, что тело запроса представлено в формате JSON.
    try {
        const response = await fetch("https://jsonplaceholder.typicode.com/users", {
        method: "POST", // *GET, POST, PUT, DELETE, etc.
        headers: {
          "Content-Type": "application/json", // 'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: JSON.stringify(userData), // Данные пользователя передаются в теле запроса в формате JSON с помощью JSON.stringify(userData).
      });
    if (!response.ok) { //После получения ответа проверяем свойство ok. Если оно равно true, значит операция прошла успешно, иначе генерируем исключение с соответствующим сообщением об ошибке.
        throw new Error('Не удалось сохранить данные пользователя');
    }
    return response.json; //Возвращаем ответ от сервера, если сохранение данных пользователя прошло успешно, т.е. результат вызова response.json(), который представляет собой распарсированные данные из ответа сервера.
} catch (error) {
    return Promise.reject(error.message); //В случае возникновения ошибки внутри блока try...catch, промис отклоняется с сообщением об ошибке.
    }
}

// Пример использования функции
const userData = {
    id: 123,
    name: 'Иван Иванов',
    email: 'ivan@example.com'
};

saveUserData(userData)
    .then(response => {
        console.log('Данные пользователя успешно сохранены.', response);
    })
    .catch(error => {
        console.error('Произошла ошибка при сохранении данных пользователя:', error);
    });


// Задание 3. "Изменение стиля элемента через заданное время"
/* Напишите функцию changeStyleDelayed, которая принимает идентификатор элемента и время задержки (в миллисекундах) в качестве аргументов. Функция должна изменить стиль элемента через указанное время. */

const UlElement = document.getElementById('user-list');
const myElement = UlElement;
function changeStyleDelayed(UlElement, delay) {
    setTimeout(() => {
        myElement.style.color = "red";
    }, delay);
}
changeStyleDelayed(myElement, 1000)